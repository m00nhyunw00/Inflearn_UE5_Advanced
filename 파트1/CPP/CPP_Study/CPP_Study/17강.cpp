#include <iostream>
using namespace std;

// 오늘의 주제 : 문자와 문자열
// bool은 그냥 정수지만, 참/거짓을 나타내기 위해 사용한다 했었다.
// 사실 char도 마찬가지. 그냥 정수지만 '문자' 의미를 나타내기 위해 사용

// char : 알파벳 / 숫자 문자를 나타낸다
// ASCII (American Standard Code for Information Interchange)
// '문자'의 의미로 작은 따옴표 '' 사용
char ch1 = 97;
char ch2 = 'a';
char ch3 = 'a' + 1;		// 'b'

//----------------------------------------------------------------

// 국제화 시대에는 영어만으로 서비스할 수 없음
// 전 세계 모든 문자에 대해 유일 코드를 부여한 것이 유니코드 (unicode)
// 참고) 유니코드에서 가장 많은 번호를 차지하는 것이 한국어/중국어 (뚫꿇 같은 말도 안되는 문자들도 전부 개별 문자로 등록되어있기 때문임)

//----------------------------------------------------------------

// 유니코드는 표기 방식이 여러가지가 있는데 대표적으로 UTF8 UTF16

// UTF8
// - 알파벳, 숫자 1바이트 (ASCII 호환)
// - 유럽 지역의 문자는 2바이트
// - 한글, 한자 등 3바이트

// UTF16
// - 알파벳, 숫자, 한글, 한자 등 거의 대부분 문자 2바이트
// - 매~~우 예외적인 고대 문자만 4바이트 (사실상 무시해도 됨)

//----------------------------------------------------------------

// wchar_t : 유니코드 문자를 나타낸다
wchar_t wch = L'가';		// 일반적으로 앞에 L을 붙여서 사용

//----------------------------------------------------------------

// Escape Sequence
// 표시하기 애매한 애들을 표현
// \t : 아스키코드 9 = Tab
// \n : 아스키코드 10 = New Line (줄바꿈)
// \r : 아스키코드 13 = Carriage Return (커서 <<)
// \특수문자 : 특수문자 자체를 표현 (예: \\ = \ , \' = ' , \" = " )

//----------------------------------------------------------------

// 문자열
// 문자들이 열을 지어서 모여 있는 것 (문자 배열?)
// 정수 (1~8바이트) 고정 길이로
// \0 (널 문자, Null Character)` 가 나올 때까지 문자가 계속 이어진다.

char str1[] = { 'h', 'e','l','l','o' };
char str2[] = "Hello World";		// 편리한 표기법
wchar_t wstr[] = L"안녕하세요";	// 유니코드 문자열

int main() {
	cout << ch1 << endl;
	cout << ch2 << endl;
	cout << ch3 << endl;

	cout << wch << endl;	// '가'가 출력이 안됨.
	// cout은 char 전용
	// 따라서 유니코드 사용시 wcout 사용
	wcout.imbue(locale("kor"));		// 심지어 한국어는 의식하지 못하므로 명시해줘야 함.
	wcout << wch << endl;

	char str3[] = { 'h', 'e','l','l','o'};
	char str4[] = { 'h', 'e','l','l','o', '\0' };	// 널 문자로 끝남을 명시

	cout << str1 << endl;
	cout << str2 << endl;
	cout << str3 << endl;
	cout << str4 << endl;
	wcout << wstr << endl;
}